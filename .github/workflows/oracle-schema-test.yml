name: Oracle Schema Validation

on:
  workflow_run:
    workflows: ["SQL Linting"]
    types:
      - completed

jobs:
  validate-oracle-schema:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    services:
      oracle:
        image: gvenzl/oracle-xe:18.4.0-slim
        env:
          ORACLE_PASSWORD: oracle
          APP_USER: wmagent
          APP_USER_PASSWORD: wmagent
        ports:
          - 1521:1521
        options: >-
          --health-cmd healthcheck.sh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period=60s

    steps:
      - uses: actions/checkout@v4

      - name: Wait for Oracle
        run: |
          max_retries=5
          counter=0
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo "Waiting for Oracle to be ready..."

          while [ $counter -lt $max_retries ]; do
            counter=$((counter + 1))
            echo -e "Attempt $counter/$max_retries:"

            echo -e "Testing connection from inside container..."
            # Create a simple SQL file in the container
            docker exec $CONTAINER_ID bash -c "echo 'SELECT 1 FROM dual;' > /tmp/wait.sql"

            # Execute the SQL file with hardcoded credentials
            if docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/wait.sql
            then
              echo "Oracle is ready!"
              exit 0
            fi

            echo -e "Container logs:"
            docker logs $CONTAINER_ID

            if [ $counter -eq $max_retries ]; then
              echo "Error: Maximum retries reached. Oracle connection failed."
              exit 51
            fi

            echo -e "Waiting 10 seconds before next attempt..."
            sleep 10
          done

      - name: Test Oracle Connection
        run: |
          echo "Testing Oracle connection..."
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")

          # Create a simple SQL file in the container
          docker exec $CONTAINER_ID bash -c "echo 'SELECT 1 FROM dual;' > /tmp/test.sql"

          # Execute the SQL file with hardcoded credentials
          docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/test.sql

      - name: Copy SQL files to container
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo "Copying SQL files to container..."
          docker cp src/wmcoredb/sql $CONTAINER_ID:/tmp/
          docker exec $CONTAINER_ID ls -la /tmp/sql/oracle/testdb/

      - name: Deploy WMBS Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying WMBS tables..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/wmbs/create_wmbs_tables.sql;
          EXIT;' > /tmp/run_wmbs_tables.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_wmbs_tables.sql; then
            echo "Error: Failed to deploy WMBS tables"
            exit 1
          fi

          echo -e "\nDeploying WMBS indexes..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/wmbs/create_wmbs_indexes.sql;
          EXIT;' > /tmp/run_wmbs_indexes.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_wmbs_indexes.sql; then
            echo "Error: Failed to deploy WMBS indexes"
            exit 1
          fi

          echo -e "\nInitializing WMBS data..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/wmbs/initial_wmbs_data.sql;
          EXIT;' > /tmp/run_wmbs_data.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_wmbs_data.sql; then
            echo "Error: Failed to initialize WMBS data"
            exit 1
          fi

      - name: Deploy DBS3Buffer Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying DBS3Buffer schema..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/dbs3buffer/create_dbs3buffer.sql;
          EXIT;' > /tmp/run_dbs3buffer.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_dbs3buffer.sql; then
            echo "Error: Failed to deploy DBS3Buffer schema"
            exit 1
          fi

      - name: Deploy Agent Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying Agent schema..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/agent/create_agent.sql;
          EXIT;' > /tmp/run_agent.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_agent.sql; then
            echo "Error: Failed to deploy Agent schema"
            exit 1
          fi

      - name: Deploy BossAir Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying BossAir schema..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/bossair/create_bossair.sql;
          EXIT;' > /tmp/run_bossair.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_bossair.sql; then
            echo "Error: Failed to deploy BossAir schema"
            exit 1
          fi

      - name: Deploy ResourceControl Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying ResourceControl schema..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/resourcecontrol/create_resourcecontrol.sql;
          EXIT;' > /tmp/run_resourcecontrol.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_resourcecontrol.sql; then
            echo "Error: Failed to deploy ResourceControl schema"
            exit 1
          fi

      - name: Deploy Tier0 Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying Tier0 tables..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/tier0/create_tier0_tables.sql;
          EXIT;' > /tmp/run_tier0_tables.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_tier0_tables.sql; then
            echo "Error: Failed to deploy Tier0 tables"
            exit 1
          fi

          echo -e "\nDeploying Tier0 indexes..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/tier0/create_tier0_indexes.sql;
          EXIT;' > /tmp/run_tier0_indexes.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_tier0_indexes.sql; then
            echo "Error: Failed to deploy Tier0 indexes"
            exit 1
          fi

          echo -e "\nDeploying Tier0 functions..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/tier0/create_tier0_functions.sql;
          EXIT;' > /tmp/run_tier0_functions.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_tier0_functions.sql; then
            echo "Error: Failed to deploy Tier0 functions"
            exit 1
          fi

          echo -e "\nInitializing Tier0 data..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/tier0/initial_tier0_data.sql;
          EXIT;' > /tmp/run_tier0_data.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_tier0_data.sql; then
            echo "Error: Failed to initialize Tier0 data"
            exit 1
          fi

      - name: Deploy TestDB Schema
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo -e "\nDeploying TestDB schema..."
          docker exec $CONTAINER_ID bash -c "echo 'WHENEVER SQLERROR EXIT SQL.SQLCODE;
          WHENEVER OSERROR EXIT 9;
          @/tmp/sql/oracle/testdb/create_testdb.sql;
          EXIT;' > /tmp/run_testdb.sql"
          if ! docker exec $CONTAINER_ID sqlplus -S "system/oracle@localhost:1521/XE" @/tmp/run_testdb.sql; then
            echo "Error: Failed to deploy TestDB schema"
            exit 1
          fi

      - name: Verify Schema Deployment
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")

          # Create query for tables
          echo -e "\nChecking table structure..."
          docker exec $CONTAINER_ID bash -c "echo 'SET LINESIZE 200
          SET PAGESIZE 1000
          SELECT table_name, tablespace_name 
          FROM all_tables 
          WHERE owner = UPPER(\"wmagent\")
          ORDER BY table_name;
          EXIT;' > /tmp/tables.sql"
          docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/tables.sql

          # Create query for indexes
          echo -e "\nChecking indexes..."
          docker exec $CONTAINER_ID bash -c "echo 'SET LINESIZE 200
          SET PAGESIZE 1000
          SELECT table_name, index_name, index_type
          FROM all_indexes
          WHERE owner = UPPER(\"wmagent\")
          ORDER BY table_name, index_name;
          EXIT;' > /tmp/indexes.sql"
          docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/indexes.sql

          # Create query for foreign keys
          echo -e "\nChecking foreign key relationships..."
          docker exec $CONTAINER_ID bash -c "echo 'SET LINESIZE 200
          SET PAGESIZE 1000
          SELECT a.table_name, a.constraint_name, a.column_name,
                 c_pk.table_name r_table_name, b.column_name r_column_name
          FROM all_cons_columns a
          JOIN all_constraints c ON a.owner = c.owner
                               AND a.constraint_name = c.constraint_name
          JOIN all_constraints c_pk ON c.r_owner = c_pk.owner
                                  AND c.r_constraint_name = c_pk.constraint_name
          JOIN all_cons_columns b ON c_pk.owner = b.owner
                                AND c_pk.constraint_name = b.constraint_name
          WHERE c.constraint_type = \"R\"
            AND a.owner = UPPER(\"wmagent\")
          ORDER BY a.table_name, a.column_name;
          EXIT;' > /tmp/fk.sql"
          docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/fk.sql

          # Create query for data rows
          echo -e "\nChecking initial data..."
          docker exec $CONTAINER_ID bash -c "echo 'SET LINESIZE 200
          SET PAGESIZE 1000
          SELECT table_name, num_rows
          FROM all_tables
          WHERE owner = UPPER(\"wmagent\")
            AND num_rows > 0
          ORDER BY table_name;
          EXIT;' > /tmp/data.sql"
          docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/data.sql

      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=gvenzl/oracle-xe:18.4.0-slim")
          echo "Running cleanup..."
          docker exec $CONTAINER_ID bash -c "echo 'DROP USER wmagent CASCADE;
          EXIT;' > /tmp/cleanup.sql"
          docker exec $CONTAINER_ID sqlplus -s "system/oracle@localhost:1521/XE" @/tmp/cleanup.sql
          echo "Cleanup completed"
