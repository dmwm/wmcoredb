name: MariaDB Schema Deployment

on:
  workflow_run:
    workflows: ["SQL Linting"]
    types:
      - completed

jobs:
  deploy-mariadb-schema:
    # Only run if the linting workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      MARIADB_PORT: 3306
      MARIADB_HOST: localhost
      MARIADB_USER: root
      MARIADB_PASSWORD: testroot
      MARIADB_DATABASE: wmagent
    strategy:
      matrix:
        mariadb-version: ['10.6', '10.11', '11.4']
    timeout-minutes: 10

    services:
      mariadb:
        image: mariadb:${{ matrix.mariadb-version }}
        env:
          MARIADB_ROOT_PASSWORD: testroot
          MARIADB_DATABASE: wmagent
          MARIADB_ROOT_HOST: "%"
          MARIADB_ALLOW_EMPTY_PASSWORD: "no"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mariadb-admin ping -h localhost -P 3306 -u root -ptestroot"
          --health-interval=10s
          --health-timeout=20s
          --health-retries=10
          --health-start-period=30s

    steps:
      - uses: actions/checkout@v4

      - name: Install MariaDB client
        run: |
          sudo apt-get update
          sudo apt-get install -y mariadb-client

      - name: Validate Environment
        run: |
          [ -z "$MARIADB_HOST" ] && echo "MARIADB_HOST is not set" && exit 10
          [ -z "$MARIADB_PORT" ] && echo "MARIADB_PORT is not set" && exit 11
          [ -z "$MARIADB_USER" ] && echo "MARIADB_USER is not set" && exit 12
          [ -z "$MARIADB_PASSWORD" ] && echo "MARIADB_PASSWORD is not set" && exit 13
          [ -z "$MARIADB_DATABASE" ] && echo "MARIADB_DATABASE is not set" && exit 14
          echo "All required environment variables are set!"

      - name: Wait for MariaDB
        run: |
          max_retries=30
          counter=0
          echo "Waiting for MariaDB to be ready..."
          while ! docker exec $(docker ps -q --filter "ancestor=mariadb:${{ matrix.mariadb-version }}") mariadb-admin ping -h localhost -P 3306 -u root -ptestroot --silent; do
            counter=$((counter + 1))
            if [ $counter -gt $max_retries ]; then
              echo "Error: Timed out waiting for MariaDB to be ready"
              echo "Debug: Checking MariaDB status..."
              docker ps
              docker logs $(docker ps -q --filter "ancestor=mariadb:${{ matrix.mariadb-version }}")
              exit 1
            fi
            echo "Attempt $counter/$max_retries: MariaDB is not ready yet, waiting..."
            sleep 2
          done
          echo "MariaDB is ready!"

      - name: Deploy TestDB Schema
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/testdb/create_testdb.sql || exit 1

      - name: Deploy WMBS Schema
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/wmbs/create_wmbs_tables.sql || exit 1
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/wmbs/create_wmbs_indexes.sql
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/wmbs/initial_wmbs_data.sql

      - name: Deploy Agent Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/agent/create_agent.sql

      - name: Deploy DBS3Buffer Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/dbs3buffer/create_dbs3buffer.sql

      - name: Deploy BossAir Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/bossair/create_bossair.sql

      - name: Deploy ResourceControl Schema
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE < src/wmcoredb/sql/mariadb/resourcecontrol/create_resourcecontrol.sql

      - name: Verify Schema Deployment
        run: |
          echo -e "\nChecking table structure..."
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE -e "
            SELECT table_name, table_schema 
            FROM information_schema.tables 
            WHERE table_schema = '$MARIADB_DATABASE'
            ORDER BY table_name;
          "

          echo -e "\nChecking foreign key relationships..."
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE -e "
            SELECT 
              table_name,
              column_name,
              referenced_table_name,
              referenced_column_name
            FROM information_schema.key_column_usage
            WHERE referenced_table_name IS NOT NULL
              AND table_schema = '$MARIADB_DATABASE'
            ORDER BY table_name, column_name;
          "

          echo -e "\nChecking for critical errors..."
          ERRORS=$(mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD $MARIADB_DATABASE -e "SHOW ENGINE INNODB STATUS\G" | grep -i "error:" || true)
          if [ -n "$ERRORS" ]; then
            echo -e "\nFound errors in InnoDB status:"
            echo "$ERRORS"
            exit 1
          else
            echo -e "\nNo critical errors found in InnoDB status"
          fi

      - name: Cleanup
        if: always()
        continue-on-error: true
        run: |
          mariadb -h$MARIADB_HOST -P$MARIADB_PORT -u$MARIADB_USER -p$MARIADB_PASSWORD -e "DROP DATABASE IF EXISTS $MARIADB_DATABASE" || true
          echo "Cleanup attempted - any errors above can be safely ignored" 